package qpses.security;

/**
 * SecurityServletTest.java
 * @author Helic Leung
 * @version 1.0
 */

import static org.easymock.EasyMock.*;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.easymock.EasyMock;
import org.easymock.IAnswer;
import org.easymock.IMocksControl;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import qpses.business.LogDataBean;
import qpses.business.WAChallengeInfo;
import qpses.util.Constant;
import qpses.util.SysException;
import qpses.util.SysManager;

public class SecurityServletTest {

    private SecurityServlet servlet;
    private IMocksControl control;
    private HttpServletRequest request;
    private HttpServletResponse response;
    private RequestDispatcher dispatcher;
    private SecurityDataBean secDB;
    private SecurityContext secCtx;
    private HttpSession session;
    private UserStatus uStatus;

    @Before
    public void setup() {
    	control = createControl();
        request = control.createMock(HttpServletRequest.class);
        response = control.createMock(HttpServletResponse.class);
        dispatcher = control.createMock(RequestDispatcher.class);
        secDB = control.createMock(SecurityDataBean.class);
        session = control.createMock(HttpSession.class);
        uStatus = new UserStatus();
        secCtx = new SecurityContext();
    }

    @After
    public void tearDown() {
    	servlet = null;
    	control = null;
    	request = null;
    	response = null;
    	dispatcher = null; 
    	secDB = null;
    	secCtx = null;
    	session = null;
    }
    
    @Test
    public void testLogoutSuccess() throws javax.servlet.ServletException, java.io.IOException {
    	
    	servlet = new TestLogoutForSecurityServlet();
        expect(request.getServletPath()).andReturn(SecurityServlet.UserBaseUrl + "/SystemOut.servlet");
        expect(request.getSession()).andReturn(session).times(5);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx);
        // expect(request.getRequestDispatcher("../logout.jsp")).andReturn(dispatcher);
        response.sendRedirect("../logout.jsp");
        session.removeAttribute(isA(String.class));
        expectLastCall().times(2);
        session.setAttribute(isA(String.class),isA(String.class));
        session.invalidate();
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test(expected=javax.servlet.ServletException.class)
    public void testLogoutFail() throws javax.servlet.ServletException, java.io.IOException{
    	
    	servlet = new SecurityServlet();
        expect(request.getServletPath()).andReturn(SecurityServlet.AdminBaseUrl + "/SystemOut.servlet");
        expect(request.getSession()).andReturn(session).times(5);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx);
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test
    public void testLoginSuccess() throws javax.servlet.ServletException, java.io.IOException {
    	
		uStatus.activeInd = -1;
		uStatus.passwordInd = -1;
    	servlet = new TestLoginForSecurityServlet(uStatus);
        expect(request.getServletPath()).andReturn("/QPSESEntry");
        expect(request.getParameter("UserId")).andReturn("test.junit").times(2);
        expect(request.getParameter("Password")).andReturn("password1").times(2);
        expect(request.getSession()).andReturn(session).times(1,10);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx).times(1,10);
        session.removeAttribute(isA(String.class));
        expectLastCall().times(1,10);
        session.setAttribute(contains("QPSES_SECURITY_CONTEXT"), isA(SecurityContext.class));
        session.setAttribute(contains("QPSES_USER_STATUS"), isA(UserStatus.class));
        response.sendRedirect("qpsuser/SystemNotices.jsp");
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test
    public void testLoginEmptyPassword() throws javax.servlet.ServletException, java.io.IOException {
    	
    	uStatus.activeInd = -1;
		uStatus.passwordInd = -1;
    	servlet = new TestLoginForSecurityServlet(uStatus);
        expect(request.getServletPath()).andReturn("/QPSESEntry");
        expect(request.getParameter("UserId")).andReturn("test.junit").times(1,10);
        expect(request.getParameter("Password")).andReturn("").times(1,10);
        expect(request.getSession()).andReturn(session).times(1,10);
        session.removeAttribute("AUTHORIZATION_MSG");
        expectLastCall();
        session.setAttribute("AUTHORIZATION_MSG","You have inputted empty user ID or password.<BR />Please try again.");
        expectLastCall();
        response.sendRedirect("unauthorized.jsp");
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test
    public void testLoginNotAuthorized() throws javax.servlet.ServletException, java.io.IOException {
    	
    	servlet = new TestLoginForSecurityServlet(null);
        expect(request.getServletPath()).andReturn("/QPSESEntry");
        expect(request.getParameter("UserId")).andReturn("test.junit").times(2);
        expect(request.getParameter("Password")).andReturn("password1").times(2);
        expect(request.getSession()).andReturn(session).times(1,10);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx).times(1,10);
        session.removeAttribute(isA(String.class));
        expectLastCall().times(1,10);
        
        session.setAttribute(contains("AUTHORIZATION_MSG"), isA(String.class));
        response.sendRedirect("unauthorized.jsp");
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test
    public void testChangePassword() throws javax.servlet.ServletException, java.io.IOException {
    	
    	secCtx.setFirstname("Helic");
    	secCtx.setLastname("Leung");
    	secCtx.soaDeptId = "junit";
    	secCtx.setEmail("helic.leung@hkmci.com");
    	
    	servlet = new TestLogoutForSecurityServlet();
        expect(request.getServletPath()).andReturn(SecurityServlet.UserBaseUrl + "ChangePassword.servlet");
        expect(request.getParameter(isA(String.class))).andReturn("password1").times(1,10);
        expect(request.getSession()).andReturn(session).times(1,10);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx).times(1,10);
        
        session.setAttribute(isA(String.class),isA(String.class));
        expectLastCall().times(1,10);
        session.setAttribute(isA(String.class),isA(UserStatus.class));
        expectLastCall().times(1,10);
        
        response.sendRedirect("ChangePassword.jsp");
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test
    public void testPerformSwitchUser() throws javax.servlet.ServletException, java.io.IOException {
    	
    	secCtx.setFirstname("Helic");
    	secCtx.setLastname("Leung");
    	secCtx.soaDeptId = "junit";
    	secCtx.setEmail("helic.leung@hkmci.com");
    	
    	servlet = new TestLogoutForSecurityServlet();
        expect(request.getServletPath()).andReturn(SecurityServlet.AdminBaseUrl + "SwitchUser.servlet").anyTimes();
        expect(request.getParameter(isA(String.class))).andReturn("1+1").anyTimes();
        expect(request.getSession()).andReturn(session).anyTimes();
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx).anyTimes();
        
        session.removeAttribute(isA(String.class));
        expectLastCall().times(0,10);
        session.setAttribute(isA(String.class),isA(SecurityContext.class));
        expectLastCall().times(0,10);
        response.sendRedirect(isA(String.class));
        expectLastCall().times(0,10);
        
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test
    public void testPerformWAChallenge() throws javax.servlet.ServletException, java.io.IOException {
    	
    	uStatus.activeInd = -1;
		uStatus.passwordInd = -1;
    	secCtx.setFirstname("Helic");
    	secCtx.setLastname("Leung");
    	secCtx.soaDeptId = "junit";
    	secCtx.setEmail("helic.leung@hkmci.com");
    	
    	servlet = new TestLoginForSecurityServlet(uStatus);
        expect(request.getServletPath()).andReturn(SecurityServlet.UserBaseUrl + "WAChallenge.servlet");
        
        expect(request.getHeader("referer")).andReturn("StaffRateValidationSLUser").times(1,10);
        expect(request.getParameter("scg")).andReturn("1").times(1,10);
        expect(request.getParameter("wa_file_part")).andReturn("I").times(1,10);
        expect(request.getParameter("wa_file_no")).andReturn("1").times(1,10);
        expect(request.getParameter("dept_id")).andReturn("OGCIO").times(1,10);
        
        expect(request.getSession()).andReturn(session).times(1,10);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx).times(1,10);
        
        session.setAttribute(isA(String.class),isA(String.class));
        expectLastCall().times(0,10);
        session.setAttribute(isA(String.class),isA(WAChallengeInfo.class));
        expectLastCall().times(0,10);
        
        expect(session.getAttribute("WA_TYPE")).andReturn("change_request").times(1,10);
        
        response.sendRedirect(contains("request_action=waChallenge"));
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test(expected=javax.servlet.ServletException.class)
    public void testPerformWAChallengeErr() throws javax.servlet.ServletException, java.io.IOException {

    	servlet = new TestLogoutForSecurityServlet();
        expect(request.getServletPath()).andReturn(SecurityServlet.UserBaseUrl + "WAChallenge.servlet");
        
        
        expect(request.getHeader("referer")).andReturn("ABCUser").times(1,10);
        expect(request.getSession()).andReturn(session).times(1,10);
        control.replay();
    	
        servlet.doPost(request, response);
    }
    

    @Test
    public void testPerformWAChallengeValidation() throws javax.servlet.ServletException, java.io.IOException, SysException {
    	
    	String issueDate = "11-May-2013";
    	String closingDate = "22-Jun-2013";
    	WAChallengeInfo wac = new WAChallengeInfo();
    	wac.setForwardScreen("a.jsp");
    	wac.setRequestAction("go");
    	wac.setIssuedDate(SysManager.getSQLDate(issueDate));
    	wac.setClosingDate(SysManager.getSQLDate(closingDate));
    	
    	uStatus.activeInd = -1;
		uStatus.passwordInd = -1;
    	secCtx.setFirstname("Helic");
    	secCtx.setLastname("Leung");
    	secCtx.soaDeptId = "junit";
    	secCtx.setEmail("helic.leung@hkmci.com");
    	
    	servlet = new TestLoginForSecurityServlet(uStatus);
        expect(request.getServletPath()).andReturn(SecurityServlet.UserBaseUrl + "WAChallengeValidation.servlet");
        
        expect(request.getHeader("referer")).andReturn("StaffRateValidationSLUser").times(0,10);
        expect(request.getParameter("scg")).andReturn("1").times(0,10);
        expect(request.getParameter("wa_file_part")).andReturn("I").times(0,10);
        expect(request.getParameter("wa_file_no")).andReturn("1").times(0,10);
        expect(request.getParameter("dept_id")).andReturn("OGCIO").times(0,10);
        expect(request.getParameter("IssuedDate")).andReturn(issueDate).times(0,10);
        expect(request.getParameter("ClosingDate")).andReturn(closingDate).times(0,10);
        expect(request.getParameter("ServiceContractNo")).andReturn("1").times(0,10);
        
        expect(request.getSession()).andReturn(session).times(0,10);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx).times(0,10);
        expect(session.getAttribute("WA_TYPE")).andReturn("proposal").times(0,10);
        expect(session.getAttribute("QPSES_WA_CHALLENGE")).andReturn(wac).times(0,10);
        
        session.removeAttribute(isA(String.class));
        expectLastCall().times(0,10);
        session.setAttribute(isA(String.class),isA(String.class));
        expectLastCall().times(0,10);
        session.setAttribute(isA(String.class),isA(WAChallengeInfo.class));
        expectLastCall().times(0,10);
        
        response.sendRedirect(contains("a.jspWAC?request_action=go"));
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
}
