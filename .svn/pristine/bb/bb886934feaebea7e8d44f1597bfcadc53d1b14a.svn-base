package qpses.util;

import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.FileItem;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import java.util.Iterator;
import java.util.List;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;

public class HttpFormRequest
{
    // Variables;
    private HashMap FileItemList  = new HashMap();
    private HashMap ParameterList = new HashMap();
    
    /** Creates a new instance of HttpFormRequest */
    public HttpFormRequest(HttpServletRequest request) throws SysException
    {
        // Create a factory for disk-based file items
        DiskFileItemFactory factory = new DiskFileItemFactory(102400, new File("C:\\Temp\\"));
        
        // Create a new file upload handler
        ServletFileUpload upload = new ServletFileUpload(factory);
        
        // Set overall request size constraint
        upload.setSizeMax(-1);
        
        List allUploadeditems = null ;
        
        try
        {
            allUploadeditems = upload.parseRequest(request);
        }
        catch (FileUploadException exFile)
        {
            String overSizeError = "ServletError:Adminservlet:performDiscountRateUpload\r\n" + exFile.getMessage();
            throw new SysException(overSizeError);
        }
        
        Iterator iter = allUploadeditems.iterator();
        
        // Parse the request
        while (iter.hasNext())
        {
            FileItem uploadeditem = (FileItem) iter.next();
            
            if (uploadeditem.isFormField())
            {
                this.ParameterList.put(uploadeditem.getFieldName().trim(), uploadeditem.getString().trim());
            }
            else if (!uploadeditem.isFormField() && uploadeditem.getSize() != 0)
            {
                this.FileItemList.put(uploadeditem.getFieldName().trim(), uploadeditem);
            }
        }
    }
    
    public String getParameter(String pName)
    {
        Object retObj = this.ParameterList.get(pName);
        
        if (retObj == null)
            return null;
        else
            return (String)(retObj);
    }
    
    private FileItem getFileItem(String pName)
    {
        Object retObj = this.FileItemList.get(pName);
        
        if (retObj == null)
            return null;
        else
            return (FileItem)(retObj);
    }
    
    public InputStream getFileInputStream(String pName) throws SysException
    {
        FileItem aFileItem = this.getFileItem(pName);
        
        if (aFileItem == null)
            return null;
        
        try
        {
            return aFileItem.getInputStream();
        }
        catch(IOException ex)
        {
            throw new SysException(ex.toString());
        }
    }
    
    public long getFileSize(String pName) throws SysException
    {
        FileItem aFileItem = this.getFileItem(pName);
        
        if (aFileItem == null)
            return 0;
        else
            return aFileItem.getSize();
    }
    
    public String getFileContentType(String pName) throws SysException
    {
        FileItem aFileItem = this.getFileItem(pName);
        
        if (aFileItem == null)
            return "";
        else
            return aFileItem.getContentType();
    }
    
    public String getFileName(String pName) throws SysException
    {
        FileItem aFileItem = this.getFileItem(pName);
        
        if (aFileItem == null)
            return "";
        else
            return aFileItem.getName();
    }
}
