package qpses.security;

/**
 * SecurityServletTest.java
 * @author Helic Leung
 * @version 1.0
 */

import static org.easymock.EasyMock.*;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.easymock.EasyMock;
import org.easymock.IAnswer;
import org.easymock.IMocksControl;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import qpses.business.LogDataBean;
import qpses.util.Constant;
import qpses.util.SysException;
import qpses.util.SysManager;

class TestLoginForSecurityServlet extends SecurityServlet {

	protected SecurityDataBean secDB; 
	protected LogDataBean logDB; 
	protected SecurityContext secCtx;
	protected UserStatus uStatus;
	protected List pvgList;
	protected List<String> adminEmails;
	
	TestLoginForSecurityServlet(UserStatus userStatus){
		uStatus = userStatus;
	}
	
	@Override
	public String getInitParameter(String str){
		return "qpsuser/SystemNotices.jsp";
	}
	
    @Override
	public SecurityDataBean getSecurityDataBean() throws SysException{
    	try {
    		// Pass a Mock DataBean
    		secDB = createMock(SecurityDataBean.class);
    		secCtx = new SecurityContext();
    		
    		if (uStatus != null){
    			uStatus.expiryDate = SysManager.getSQLDate(Constant.QPSIS_EXPIRY_DATE);
    			uStatus.userId = "test.junit";
    			uStatus.dpDeptId = "junit";
    			uStatus.soaDeptId = "junit";
    		}
    		secCtx.userGroup = "U";
    		
    		pvgList = new ArrayList();
    		pvgList.add("user");
    		adminEmails = new ArrayList();
    		adminEmails.add("helic.leung@hkmci.com");
    		
    		expect(secDB.selectSecCTX("test.junit")).andReturn(secCtx);
    		expect(secDB.getUserStatus(secCtx,"password1")).andReturn(uStatus);
    		
    		expect(secDB.getFailureCount(secCtx,"Login")).andReturn(Constant.QPSIS_WRONG_PASSWORD_ATTEMPT_LIMIT).times(0,10);
    		expect(secDB.lockUserAccount(secCtx,0,true)).andReturn(1).times(0,10);
    		expect(secDB.getAdminEmails()).andReturn(adminEmails).times(0,10);
    		
    		secDB.updateLastAccessAttempt(secCtx);
    		expectLastCall().times(0,10);
            secDB.resetFailureCount(secCtx,"Login");
            expectLastCall().times(0,10);
            
            expect(secDB.createAccessPrivileges(secCtx)).andReturn(pvgList).times(0,10);
            expect(secDB.getAccessibleFunction("U")).andReturn("Login").times(0,10);
            
			replay(secDB);

		} catch (SecurityException e) {
			throw new SysException(e.getMessage());
		}
        return secDB;
    }
    
    @Override
	public LogDataBean getLogDataBean() throws SysException{
    	try {
    		// Pass a Mock DataBean
    		logDB = createMock(LogDataBean.class);
    		
    		logDB.writeAccessLog(uStatus,secCtx);
    		expectLastCall().times(0,10);

			replay(logDB);

		} catch (SecurityException e) {
			throw new SysException(e.getMessage());
		}
        return logDB;
    }
}

class TestLogoutForSecurityServlet extends SecurityServlet {

	private SecurityDataBean secDB; 
	private LogDataBean logDB; 
	protected UserStatus uStatus;
	
    @Override
	public SecurityDataBean getSecurityDataBean() throws SysException{
    	try {
    		uStatus = new UserStatus();
			uStatus.expiryDate = SysManager.getSQLDate(Constant.QPSIS_EXPIRY_DATE);
			uStatus.userId = "test.junit";
			uStatus.dpDeptId = "junit";
			uStatus.soaDeptId = "junit";
    		// Pass a Mock DataBean
    		secDB = createMock(SecurityDataBean.class);
    		logDB = createMock(LogDataBean.class);
    		
    		secDB.updateSystemOut(isA(SecurityContext.class));
    		expect(secDB.getUserStatus(isA(SecurityContext.class),isA(String.class))).andReturn(uStatus).times(0,10);
    		secDB.changePassword(isA(SecurityContext.class),isA(String.class),lt((byte)0));
    		expectLastCall().times(0,10);
    		
    		
			replay(secDB);
			replay(logDB);
		} catch (SecurityException e) {
			throw new SysException(e.getMessage());
		}
        return secDB;
    }
    
    @Override
	public LogDataBean getLogDataBean() throws SysException{
    	// Pass a Mock DataBean
		logDB = createMock(LogDataBean.class);
		
		logDB.insertChangePasswordLog("test.junit","junit","junit","Y");
		expectLastCall().times(0,10);

		replay(logDB);
        return logDB;
    }
    
}

public class SecurityServletTest {

    private SecurityServlet servlet;
    private IMocksControl control;
    private HttpServletRequest request;
    private HttpServletResponse response;
    private RequestDispatcher dispatcher;
    private SecurityDataBean secDB;
    private SecurityContext secCtx;
    private HttpSession session;
    private UserStatus uStatus;

    @Before
    public void setup() {
    	control = createControl();
        request = control.createMock(HttpServletRequest.class);
        response = control.createMock(HttpServletResponse.class);
        dispatcher = control.createMock(RequestDispatcher.class);
        secDB = control.createMock(SecurityDataBean.class);
        session = control.createMock(HttpSession.class);
        uStatus = new UserStatus();
        secCtx = new SecurityContext();
    }

    @After
    public void tearDown() {
    	servlet = null;
    	control = null;
    	request = null;
    	response = null;
    	dispatcher = null; 
    	secDB = null;
    	secCtx = null;
    	session = null;
    }
    
    @Test
    public void testLogoutSuccess() throws javax.servlet.ServletException, java.io.IOException {
    	
    	servlet = new TestLogoutForSecurityServlet();
        expect(request.getServletPath()).andReturn(SecurityServlet.UserBaseUrl + "/SystemOut.servlet");
        expect(request.getSession()).andReturn(session).times(5);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx);
        // expect(request.getRequestDispatcher("../logout.jsp")).andReturn(dispatcher);
        response.sendRedirect("../logout.jsp");
        session.removeAttribute(isA(String.class));
        expectLastCall().times(2);
        session.setAttribute(isA(String.class),isA(String.class));
        session.invalidate();
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test(expected=javax.servlet.ServletException.class)
    public void testLogoutFail() throws javax.servlet.ServletException, java.io.IOException{
    	
    	servlet = new SecurityServlet();
        expect(request.getServletPath()).andReturn(SecurityServlet.AdminBaseUrl + "/SystemOut.servlet");
        expect(request.getSession()).andReturn(session).times(5);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx);
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test
    public void testLoginSuccess() throws javax.servlet.ServletException, java.io.IOException {
    	
		uStatus.activeInd = -1;
		uStatus.passwordInd = -1;
    	servlet = new TestLoginForSecurityServlet(uStatus);
        expect(request.getServletPath()).andReturn("/QPSESEntry");
        expect(request.getParameter("UserId")).andReturn("test.junit").times(2);
        expect(request.getParameter("Password")).andReturn("password1").times(2);
        expect(request.getSession()).andReturn(session).times(1,10);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx).times(1,10);
        session.removeAttribute(isA(String.class));
        expectLastCall().times(1,10);
        session.setAttribute(contains("QPSES_SECURITY_CONTEXT"), isA(SecurityContext.class));
        session.setAttribute(contains("QPSES_USER_STATUS"), isA(UserStatus.class));
        response.sendRedirect("qpsuser/SystemNotices.jsp");
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test
    public void testLoginEmptyPassword() throws javax.servlet.ServletException, java.io.IOException {
    	
    	uStatus.activeInd = -1;
		uStatus.passwordInd = -1;
    	servlet = new TestLoginForSecurityServlet(uStatus);
        expect(request.getServletPath()).andReturn("/QPSESEntry");
        expect(request.getParameter("UserId")).andReturn("test.junit").times(1,10);
        expect(request.getParameter("Password")).andReturn("").times(1,10);
        expect(request.getSession()).andReturn(session).times(1,10);
        session.removeAttribute("AUTHORIZATION_MSG");
        expectLastCall();
        session.setAttribute("AUTHORIZATION_MSG","You have inputted empty user ID or password.<BR />Please try again.");
        expectLastCall();
        response.sendRedirect("unauthorized.jsp");
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test
    public void testLoginNotAuthorized() throws javax.servlet.ServletException, java.io.IOException {
    	
    	servlet = new TestLoginForSecurityServlet(null);
        expect(request.getServletPath()).andReturn("/QPSESEntry");
        expect(request.getParameter("UserId")).andReturn("test.junit").times(2);
        expect(request.getParameter("Password")).andReturn("password1").times(2);
        expect(request.getSession()).andReturn(session).times(1,10);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx).times(1,10);
        session.removeAttribute(isA(String.class));
        expectLastCall().times(1,10);
        
        session.setAttribute(contains("AUTHORIZATION_MSG"), isA(String.class));
        response.sendRedirect("unauthorized.jsp");
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
    @Test
    public void testChangePassword() throws javax.servlet.ServletException, java.io.IOException {
    	
    	secCtx.setFirstname("Helic");
    	secCtx.setLastname("Leung");
    	secCtx.soaDeptId = "junit";
    	secCtx.setEmail("helic.leung@hkmci.com");
    	
    	servlet = new TestLogoutForSecurityServlet();
        expect(request.getServletPath()).andReturn(SecurityServlet.UserBaseUrl + "ChangePassword.servlet");
        expect(request.getParameter(isA(String.class))).andReturn("password1").times(1,10);
        expect(request.getSession()).andReturn(session).times(1,10);
        expect(session.getAttribute("QPSES_SECURITY_CONTEXT")).andReturn(secCtx).times(1,10);
        
        session.setAttribute(isA(String.class),isA(String.class));
        expectLastCall().times(1,10);
        session.setAttribute(isA(String.class),isA(UserStatus.class));
        expectLastCall().times(1,10);
        
        response.sendRedirect("ChangePassword.jsp");
        control.replay();
    	
        servlet.doPost(request, response);
        verify(secDB);
    }
    
}
