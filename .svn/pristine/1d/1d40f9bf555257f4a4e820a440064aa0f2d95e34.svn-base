/*
 * AdminCPSServlet.java
 *
 * Created on 8th July, 2013
 */

package qpses.servlet;

import java.io.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.sql.Date;

import javax.servlet.*;
import javax.servlet.http.*;
import org.apache.commons.fileupload.DiskFileUpload;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.record.RecordFormatException;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import qpses.business.ContractorDataBean;
import qpses.business.ContractorInfo;
import qpses.business.DeptInfo;
import qpses.business.CPSDataBean;
import qpses.business.CPSInfo;
import qpses.security.SecurityContext;
import qpses.util.Constant;
import qpses.util.SysException;
import qpses.util.SysManager;
import qpses.util.MSExcelHelper;
import sun.util.logging.resources.logging;

public class AdminCPSServlet extends HttpServlet {
    
    // log4j
    static Logger logger = Logger.getLogger(AdminCPSServlet.class.getName());
    
    
    private static String postScreen = null;
    private static String requestAction = null;
    
    public void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        requestAction = request.getServletPath();

        if (requestAction.equals("/qpsadmin/CPSSearch.servlet")) {
            performCPSSearch(request, response);
            return;
        }
        if (requestAction.equals("/qpsadmin/CPSSearchReset.servlet")) {
            performCPSSearchReset(request, response);
            return;
        }
        if (requestAction.equals("/qpsadmin/CPSDownloadReport.servlet")) {
            performCPSDownloadReport(request, response);
            return;
        }
    }
    
    public void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        doPost(request, response);
    }
     
    private void performCPSSearch(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        
        //SecurityContext secCtx = (SecurityContext) request.getSession().getAttribute("QPSES_SECURITY_CONTEXT");
        HashMap CPSHashMap = new HashMap();
        //CPSInfo cps = new CPSInfo();
        //List<Date> dateFilters = new ArrayList<Date>();
                
        try {
        	//CPSDataBean cpsDB = new CPSDataBean();
        	
            /*String invitationEndDate = request.getParameter("InvitationEndDate");
            String awardStartDate = request.getParameter("AwardStartDate");
            String awardEndDate = request.getParameter("AwardEndDate");*/
        	
           /* String cutOffDate = request.getParameter("CutOffDate");
            cps.setCutOffDate(("".equals(cutOffDate))?null:SysManager.getSQLDate(cutOffDate));*/
        	
        	String cutOffDateStr = request.getParameter("CutOffDate");
            Date cutOffDate = ("".equals(cutOffDateStr))? null:SysManager.getSQLDate(cutOffDateStr);
            
            List<String> cat = new ArrayList();
            cat.add("1");
            cat.add("2/N");
            cat.add("2/J");
            cat.add("3/N");
            cat.add("3/J");
            cat.add("4");
            
            for (int i = 0; i < cat.size(); i++ ){
            	CPSHashMap.put("CPS"+cat.get(i), getCPSContent(cat.get(i), cutOffDateStr));
            }
            
            CPSHashMap.put("CUTOFFDATE",cutOffDate);
            //CPSHashMap.put("DateFilters",dateFilters);
            request.getSession().setAttribute("CPS_PARAMETER",CPSHashMap);
            request.getSession().setAttribute("CPS_REPORT_PARAMETER",CPSHashMap);
            
            postScreen = "CPSGenerate.jsp";
            response.sendRedirect(postScreen);
            return;
        }catch(Exception ex){
        	logger.error(ex);
            throw new ServletException("Servlet Error: AdminCPSServlet:performCPSSearch\n" + ex.toString());
        }
    }
    
    private void performCPSSearchReset(HttpServletRequest request, HttpServletResponse response)
    throws ServletException {
        
        try{
            request.getSession().removeAttribute("CPS_PARAMETER");
            request.getSession().removeAttribute("CPS_REPORT_PARAMETER");
            postScreen = request.getHeader("referer");
            response.sendRedirect(postScreen);
            return;
        }catch(Exception ex){
        	logger.error(ex);
            throw new ServletException("Servlet Error:  AdminCPSServlet:performCPSSearchReset\n" + ex.toString());
        }
    }
    
    private static final int BYTES_DOWNLOAD = 1024;
    
    private void performCPSDownloadReport(HttpServletRequest request, HttpServletResponse response)
    	    throws ServletException {
    	        
    	        try{
    	        	String currentDateStr = SysManager.getCurDateTimeStr("dd-MMM-yyyy");
    	        	String title = "General Quality Sub-scores Assigned to SOA-QPS3 Contractors for the Period 31-Jul-2013 to ";
    	            String generateReportDate = "Report Generation Date: " + currentDateStr;
    	            
    	        	HashMap searchParaHashMap = (HashMap) request.getSession().getAttribute("CPS_REPORT_PARAMETER");
    	            
    	            LinkedList<CPSInfo> cpsCats = new LinkedList<CPSInfo>(); 
    	            
    	            if (searchParaHashMap!=null){
    	            	
    	            	Date cutOffDate = (Date)searchParaHashMap.get("CUTOFFDATE");
    	            	if (cutOffDate == null) {
    	            		title = title + currentDateStr;
    	            	} else {
    	            		title = title + SysManager.getStringfromSQLDate(cutOffDate);
    	            	}
    	            	
    	            	cpsCats.add((CPSInfo) searchParaHashMap.get("CPS1"));
    	            	cpsCats.add((CPSInfo) searchParaHashMap.get("CPS2/N"));
    	            	cpsCats.add((CPSInfo) searchParaHashMap.get("CPS2/J"));
    	            	cpsCats.add((CPSInfo) searchParaHashMap.get("CPS3/N"));
    	            	cpsCats.add((CPSInfo) searchParaHashMap.get("CPS3/J"));
    	            	cpsCats.add((CPSInfo) searchParaHashMap.get("CPS4"));

    	            } 
    	            
    	            URL getDirectoryPath = Thread.currentThread().getContextClassLoader().getResource("");
    	    		String directoryPath = getDirectoryPath.toString().replace("file:/", "") + "qpses/util/";
    	    		String serverInputFilePath = directoryPath + Constant.CPS_TEMPLATE_NAME;
    	    		String serverOutputFilePath = directoryPath + "ExportGenerateCPS.xls";
    	    		String serverOutputFileRelativePath = "/WEB-INF/classes/qpses/util/ExportGenerateCPS.xls";
    	    		String clientOutputFileName = "GenerateCPS.xls";
    	    		
    	    		MSExcelHelper msxlsHelper = new MSExcelHelper(serverInputFilePath, serverOutputFilePath);
    	    		
    	    		msxlsHelper.setExcelValue(1, 2, 2, title, false);
    	    		msxlsHelper.setExcelValue(1, 3, 2, generateReportDate, false);
    	    		
    	    		for (CPSInfo cat:cpsCats){
    	    			String catGroup = cat.getServiceCategoryGroup();
    	    			int startRow = 0;

    	    			if ( "1".equals(catGroup)  ){
    	    				startRow = Constant.CPS_EXCEL_CAT_1_START_ROW;
    	    			} else if( "2/N".equals(catGroup)  ){
    	    				startRow = Constant.CPS_EXCEL_CAT_2N_START_ROW;
    	    			} else if( "2/J".equals(catGroup)  ){
    	    				startRow = Constant.CPS_EXCEL_CAT_2J_START_ROW;
    	    			} else if( "3/N".equals(catGroup)  ){
    	    				startRow = Constant.CPS_EXCEL_CAT_3N_START_ROW;
    	    			} else if( "3/J".equals(catGroup)  ){
    	    				startRow = Constant.CPS_EXCEL_CAT_3J_START_ROW;
    	    			} else if( "4".equals(catGroup)  ){
    	    				startRow = Constant.CPS_EXCEL_CAT_4_START_ROW;
    	    			}
    	    			
    	    			for (int i = 0; i < cat.getContractorIds().size(); i++){
    	    				msxlsHelper.setExcelValue(1, startRow + i, Constant.CPS_EXCEL_CONTRACTOR_ID_COLUMN, cat.getContractorIds().get(i), false);
    	    	    		msxlsHelper.setExcelValue(1, startRow + i, Constant.CPS_EXCEL_CONTRACTOR_NAME_COLUMN, cat.getContractorNames().get(i), false);
    	    	    		msxlsHelper.setExcelValue(1, startRow + i, Constant.CPS_EXCEL_SCORE_COLUMN, cat.getScores().get(i), false);
    	    			}
    	    			
    	    		}

    	    		
    	    		msxlsHelper.process();
    	    		//System.out.println(msxlsHelper.getHtmlText());
    	    		
    	    		response.setContentType("application/vnd.ms-excel");
    	    		response.setHeader("Content-Disposition", "attachment;filename=\"" + clientOutputFileName + "\"");
    	    		ServletContext ctx = getServletContext();
    	    		InputStream is = ctx.getResourceAsStream(serverOutputFileRelativePath);
    	    	 
    	    		try {
    	    			
    	    			logger.debug("Start Download...");
	    	    		int read=0;
	    	    		byte[] bytes = new byte[BYTES_DOWNLOAD];
	    	    		OutputStream os = response.getOutputStream();
	    	    	 
	    	    		while((read = is.read(bytes))!= -1){
	    	    			os.write(bytes, 0, read);
	    	    		}
	    	    		os.flush();
	    	    		os.close();	
	    	    		logger.debug("Download End.");
    	    		}
    	    		catch(Exception ex){
    	    			logger.error(ex);
        	            throw new ServletException("Servlet Error:  AdminCPSServlet:performCPSDownloadReport \nDownload Error\n" + ex.toString());
        	        }

    	    		//Clear Memory and delete output file
    	    		msxlsHelper.close();
    	    		//postScreen = request.getHeader("referer");
    	            //response.sendRedirect(postScreen);
    	            return;
    	        }catch(Exception ex){
    	        	logger.error(ex);
    	            throw new ServletException("Servlet Error:  AdminCPSServlet:performCPSDownloadReport\n" + ex.toString());
    	        }
    	    }
    
    
    private CPSInfo getCPSContent(String cat, String cutOffDateStr) throws ServletException{
    	CPSInfo cps = new CPSInfo();
    	Date cutOffDate = null;
    	
    	List<String> contractorIds = new ArrayList<String>();
    	List<String> contractorNames = new ArrayList<String>();
    	List<String> contractorScores = new ArrayList<String>();
    	  
    	try {
    		
    		if ( "".equals(cutOffDateStr)){
            	cutOffDate = SysManager.getSQLDate(SysManager.getCurDateTimeStr("dd-MMM-yyyy"));
            } else {
            	cutOffDate = SysManager.getSQLDate(cutOffDateStr);
            }
    		
			CPSDataBean cpsDB = new CPSDataBean();
			ContractorDataBean contractorDB = new ContractorDataBean();
			List<ContractorInfo> cpsContractors= contractorDB.selectContractorByCatgp(cat);
			
			String cpsAverageScore = cpsDB.genCPSAverageScorePerCat(cat, cutOffDate);
			
			for (ContractorInfo contractor : cpsContractors){
				String contractorId = contractor.getContractorId();
				String contractorName = contractor.getContractorName();
				String score = cpsDB.genCPSScore(contractorId, cat, cutOffDate, cpsAverageScore);
				contractorIds.add(contractorId);
				contractorNames.add(contractorName);
				contractorScores.add(score);
			}
			
			cps.setServiceCategoryGroup(cat);
			cps.setContractorIds(contractorIds);
			cps.setContractorNames(contractorNames);
			cps.setScores(contractorScores);
			
		} catch(Exception ex){
        	logger.error(ex);
            throw new ServletException("Servlet Error: AdminCPSServlet:getCPSContent\n" + ex.toString());
		}
    	
		return cps;
    	
    }
    
}